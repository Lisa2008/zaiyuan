/*function triplets(a, b, c) {
  let map = new Map();
  
  let temp_array = [];
  for(let n of b) {
    temp_array = [];
    for(let m of a) {
      if(m <= n) {
        temp_array.push([m, n]);
      }
    }
    map.set(n, temp_array);
  }
  
  let count = 0;
  
  for(let key of map.keys()) {
    for(let m of c) {
      if(m <= key) {
        count += map.get(key).length;
      }
    }
  }

  return count;
}*/

function triplets(a, b, c) {
  a.sort((a, b) => a - b);
  b.sort((a, b) => a - b);
  c.sort((a, b) => a - b);
  
  let a_u = [...new Set(a)];
  let b_u = [...new Set(b)];
  let c_u = [...new Set(c)];
  
  let count = 0;
  
  let i, j;
  
  for(let n of b_u) {
    i = 0;
    while(a_u[i] <= n && i < a_u.length) {
      i++;
    }
    j = 0;
    
    while(c_u[j] <= n && j < c_u.length) {
      j++;
    }
        
    count += i * j;
  }

  return count;
}

let array_a = [1,3,5];
let array_b = [2,3];
let array_c = [1,2,3];

//console.log(triplets(array_a, array_b, array_c));

let array_a1 = [1,4,5];
let array_b1 = [2,3,3];
let array_c1 = [1,2,3];

//console.log(triplets(array_a1, array_b1, array_c1));

let array_a2 = [1,3,5,7];
let array_b2 = [5,7,9];
let array_c2 = [7,9,11,13];

console.log(triplets(array_a2, array_b2, array_c2));
